openapi: 3.0.0
servers:
  - url: http://localhost:8081/
info:
  title: Payment Service API
  version: '0.1'
paths:
  /payments:
    get:
      tags:
        - Payments
      operationId: app.get_payments_history
      summary: Get all payments
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 100
      responses:
        '200':
          description: Return payment history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
  '/payment/{payment_id}':
    get:
      tags:
        - Payments
      operationId: app.get_payment
      summary: Get a single payment info
      parameters:
        - $ref: '#/components/parameters/payment_id'
      responses:
        '200':
          description: Return payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment does not exist
  '/payment':
    post:
      tags:
        - Payments
      operationId: app.make_payment
      summary: Create a payment
      responses:
        '201':
          description: New payment created
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: payment
              $ref: '#/components/schemas/Payment'
  '/creditCard':
    post:
      tags:
        - CreditCard
      operationId: app.add_credit_card
      summary: Add credit card
      responses:
        '201':
          description: Added credit card
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: credit_card
              $ref: '#/components/schemas/CreditCard'
  '/creditCard/{owner_id}':
    get:
      tags:
        - CreditCard
      operationId: app.get_credit_card
      summary: Get the credit card of user
      parameters:
        - $ref: '#/components/parameters/owner_id'
      responses:
        '200':
          description: Credit card of the user if exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCard'
        '404':
          description: Credit Card does not exist
components:
  parameters:
    payment_id:
      name: payment_id
      description: Payment's Unique identifier
      in: path
      required: true
      schema:
        type: integer
    owner_id:
      name: owner_id
      description: Owner's Unique identifier
      in: path
      required: true
      schema:
        type: integer
  schemas:
    Payment:
      type: object
      required:
        - user_id
        - amount
      properties:
        id:
          type: integer
          description: Unique identifier
          example: 111
          readOnly: true
        user_id:
          type: integer
          description: User id who made payment
          example: 1
        amount:
          type: number
          description: amount of payment
          example: 100.0
        successful:
          type: boolean
          description: True if payment is successful
          example: true
        created:
          type: string
          format: date-time
          description: Creation time
          example: '2015-07-07T15:49:51.230+02:00'
          readOnly: true
    CreditCard:
      type: object
      required:
        - user_id
        - full_name
        - card_number
        - expiration_date
        - cvv
      properties:
        id:
          type: integer
          description: Unique identifier
          example: 111
          readOnly: true
        user_id:
          type: integer
          description: Owner of the credit card
          example: 111
        full_name:
          type: string
          description: Full name of the owner
          example: SLOBODAN KLETNIKOV
        card_number:
          type: string
          description: Card Number
          example: 5555 3333 4444 6666
        expiration_date:
          type: string
          description: VALID THRU
          example: 01/20
        cvv:
          type: string
          description: CVV Code
          example: 111